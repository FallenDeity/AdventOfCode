import pytest
from day_3 import Cell, get_adjacent, parse_cells, part_a, part_b


@pytest.mark.parametrize(
    "test_input,expected",
    [
        (
            [
                "1.2.3",
                "4.5.6",
                "7.8.9",
            ],
            [
                Cell("1", 0, (0, 1)),
                Cell("2", 0, (2, 3)),
                Cell("3", 0, (4, 5)),
                Cell("4", 1, (0, 1)),
                Cell("5", 1, (2, 3)),
                Cell("6", 1, (4, 5)),
                Cell("7", 2, (0, 1)),
                Cell("8", 2, (2, 3)),
                Cell("9", 2, (4, 5)),
            ],
        ),
    ],
)
def test_parse_cells(test_input: list[str], expected: list[Cell]) -> None:
    assert parse_cells(test_input) == expected


@pytest.mark.parametrize(
    "test_input,expected",
    [
        (
            [
                "1.2.3",
                "4.5.6",
                "7.8.9",
            ],
            [
                Cell("1", 0, (0, 1)),
                Cell("2", 0, (2, 3)),
                Cell("3", 0, (4, 5)),
                Cell("4", 1, (0, 1)),
                Cell("5", 1, (2, 3)),
                Cell("6", 1, (4, 5)),
                Cell("7", 2, (0, 1)),
                Cell("8", 2, (2, 3)),
                Cell("9", 2, (4, 5)),
            ],
        ),
    ],
)
def test_get_adjacent(test_input: list[str], expected: list[Cell]) -> None:
    cells = parse_cells(test_input)
    assert get_adjacent(cells[0], cells) == [expected[3]]
    assert get_adjacent(cells[1], cells) == [expected[4]]
    assert get_adjacent(cells[2], cells) == [expected[5]]
    assert get_adjacent(cells[3], cells) == [expected[0], expected[6]]
    assert get_adjacent(cells[4], cells) == [expected[1], expected[7]]
    assert get_adjacent(cells[5], cells) == [expected[2], expected[8]]
    assert get_adjacent(cells[6], cells) == [expected[3]]
    assert get_adjacent(cells[7], cells) == [expected[4]]
    assert get_adjacent(cells[8], cells) == [expected[5]]


@pytest.mark.parametrize(
    "test_input,expected",
    [
        (
            [
                ".......................153..988....502..842.........588.....441.468......481..........314...715.57............................163..992..512.",
                "............805............*......#.............%...............*........=......%......................#......*.............-....#....*.....",
                "........914.........#...617..201.........271.....671......52..898................847..........*230..215......393..%751....537...............",
            ],
            8753,
        ),
        (
            [
                "...800*.............246*.........370..............................-.........*....639....*.....362.368.......818................687..........",
                ".........$.173............383=......*........389......................273....785.....514....=...*....*...........@..............*....446*833",
                ".433...227...*...-.-...............770.988.................738.523...*....................397....599..499...&..385.........*199.35..........",
            ],
            9351,
        ),
    ],
)
def test_part_a(test_input: list[str], expected: int) -> None:
    assert part_a(parse_cells(test_input)) == expected


@pytest.mark.parametrize(
    "test_input,expected",
    [
        (
            [
                ".......................153..988....502..842.........588.....441.468......481..........314...715.57............................163..992..512.",
                "............805............*......#.............%...............*........=......%......................#......*.............-....#....*.....",
                "........914.........#...617..201.........271.....671......52..898................847..........*230..215......393..%751....537...............",
            ],
            1029860,
        ),
        (
            [
                "...800*.............246*.........370..............................-.........*....639....*.....362.368.......818................687..........",
                ".........$.173............383=......*........389......................273....785.....514....=...*....*...........@..............*....446*833",
                ".433...227...*...-.-...............770.988.................738.523...*....................397....599..499...&..385.........*199.35..........",
            ],
            1080933,
        ),
    ],
)
def test_part_b(test_input: list[str], expected: int) -> None:
    assert part_b(parse_cells(test_input)) == expected
